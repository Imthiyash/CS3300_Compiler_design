//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   boolean from_stmt_list = false;
   boolean from_stmt = false;
   boolean from_simple_exp = false;
   boolean from_reg = false;
   String exp_type = ".";
   String move_to = ".";
   int offset = 0;

   public void Print(String s){
      System.out.println(s);
   }

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      Print("\t\t.text");
      Print("\t\t.globl\t\tmain");
      Print("main:");
      Print("\t\tsw $fp, 0($sp)");
      Print("\t\tsw $ra, -4($sp)");
      Print("\t\tmove $fp, $sp");
      offset = 8;
      n.f0.accept(this);
      n.f1.accept(this);
      String f_num = n.f2.accept(this).toString();
      // if(Integer.valueOf(f_num) > 4){
      //    offset += (Integer.valueOf(f_num) - 4)*4;
      // }
      n.f3.accept(this);
      n.f4.accept(this);
      String s_num = n.f5.accept(this).toString();
      n.f6.accept(this);
      n.f7.accept(this);
      String t_num = n.f8.accept(this).toString();
      int stack_size = (2 + Integer.valueOf(s_num))*4;
      Print("\t\tsubu $sp, $sp, " + String.valueOf(stack_size));
      n.f9.accept(this);
      n.f10.accept(this);
      Print("\t\tlw $fp, 0($fp)");
      Print("\t\tlw $ra, -4($fp)");
      Print("\t\taddu $sp, $sp, " + String.valueOf(stack_size));
      Print("\t\tj $ra\n");
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      Print("\t\t.text");
      Print("\t\t.globl _halloc");
      Print("_halloc:");
      Print("\t\tli $v0, 9");
      Print("\t\tsyscall");
      Print("\t\tj $ra\n");
      Print("\t\t.text");
      Print("\t\t.globl _print");
      Print("_print:");
      Print("\t\tli $v0, 1");
      Print("\t\tsyscall");
      Print("\t\tla $a0, newl");
      Print("\t\tli $v0, 4");
      Print("\t\tsyscall");
      Print("\t\tj $ra\n");
      Print("\t\t.data");
      Print("\t\t.align   0");
      Print("newl:\t.asciiz \"\\n\" ");
      Print("\t\t.data");
      Print("\t\t.align   0");
      Print("str_er: .asciiz \" ERROR: abnormal termination\\n\" ");
      n.f14.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      from_stmt_list = true;
      n.f0.accept(this);
      from_stmt_list = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n) {
      R _ret=null;
      String lab  =  n.f0.accept(this).toString();
      n.f1.accept(this);
      String f_num = n.f2.accept(this).toString();
      n.f3.accept(this);
      n.f4.accept(this);
      String s_num = n.f5.accept(this).toString();
      n.f6.accept(this);
      n.f7.accept(this);
      String t_num = n.f8.accept(this).toString();
      n.f9.accept(this);
      Print("\t\t.text");
      Print("\t\t.globl\t\t" + lab);
      Print(lab + ":");
      Print("\t\tsw $fp, 0($sp)");
      Print("\t\tmove $fp $sp");
      int stack_size = (2 + Integer.valueOf(s_num))*4;
      Print("\t\tsubu $sp, $sp, " + String.valueOf(stack_size));
      Print("\t\tsw $ra, -4($fp)");
      offset = 8;
      // if(Integer.valueOf(f_num) > 4){
      //    offset += (Integer.valueOf(f_num) - 4)*4;
      // }
      n.f10.accept(this);
      n.f11.accept(this);
      Print("\t\tlw $ra, -4($fp)");
      Print("\t\tlw $fp, 0($fp)");
      Print("\t\taddu $sp, $sp, " + String.valueOf(stack_size));
      Print("\t\tj $ra\n");
      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      from_stmt = true;
      n.f0.accept(this);
      from_stmt = false;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      Print("\t\tnop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      Print("\t\tla $a0, str_er");
      Print("\t\tsyscall");
      Print("\t\tli $v0, 10");
      Print("\t\tsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = n.f1.accept(this).toString();
      String lab = n.f2.accept(this).toString();
      Print("\t\tbeqz $" + reg + " " + lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String lab = n.f1.accept(this).toString();
      Print("\t\tb " + lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg1 = n.f1.accept(this).toString();
      String i = n.f2.accept(this).toString();
      String reg2 = n.f3.accept(this).toString();
      Print("\t\tsw $" + reg2 + ", " + i +"($" + reg1 + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg1 = n.f1.accept(this).toString();
      String reg2 = n.f2.accept(this).toString();
      String i = n.f3.accept(this).toString();
      Print("\t\tlw $" + reg1 + ", " + i +"($" + reg2 + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = n.f1.accept(this).toString();
      move_to = reg;
      String exp = n.f2.accept(this).toString();
      if(exp_type.equals("reg")){
         Print("\t\tmove $" + reg + ", $" + exp);
      }
      if(exp_type.equals("int")){
         Print("\t\tli $" + reg + ", " + exp);
      }
      if(exp_type.equals("label")){
         Print("\t\tla $" + reg + ", " + exp);
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String exp = n.f1.accept(this).toString();
      if(n.f1.f0.which == 0){
         Print("\t\tmove $a0, $" + exp);
      }
      else if(n.f1.f0.which == 1){
         Print("\t\tli $a0, " + exp);
      }
      Print("\t\tjal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = n.f1.accept(this).toString();
      String i = n.f2.accept(this).toString();
      String j = String.valueOf(offset + (Integer.valueOf(i))*4);
      Print("\t\tlw $" + reg + ", -" + j + "($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String i = n.f1.accept(this).toString();
      String reg = n.f2.accept(this).toString();
      String j = String.valueOf(offset + (Integer.valueOf(i))*4);
      Print("\t\tsw $" + reg + ", -" + j + "($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String i = n.f1.accept(this).toString();
      String reg = n.f2.accept(this).toString();
      String j = String.valueOf(4 + (Integer.valueOf(i))*4);
      Print("\t\tsw $" + reg + ", -" + j + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = n.f1.accept(this).toString();
      if(n.f1.f0.which == 0){
         Print("\t\tmove $v0, $" + reg);
      }
      else if(n.f1.f0.which == 2){
         Print("\t\tla $v0, " + reg);
      }
      Print("\t\tjalr $v0");
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      String reg = n.f0.accept(this).toString();
      return (R)reg;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      exp_type = "Hallocate";
      R _ret=null;
      n.f0.accept(this);
      String reg = n.f1.accept(this).toString();
      exp_type = "Hallocate";
      if(n.f1.f0.which == 1){
         Print("\t\tli $a0, " + reg);
      }
      else{
         Print("\t\tmove $a0, $" + reg);
      }
      Print("\t\tjal _halloc");
      Print("\t\tmove $" + move_to + ", $v0");
      return (R)"v0";
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      exp_type = "operation";
      R _ret=null;
      String op = n.f0.accept(this).toString();
      String reg1 = n.f1.accept(this).toString();
      String reg2 = n.f2.accept(this).toString();
      exp_type = "operation";
      if(n.f2.f0.which == 0){
         Print("\t\t" + op + " $" + move_to + ", $" + reg1 + ", $" + reg2);
      }
      else{
         Print("\t\t" + op + " $" + move_to + ", $" + reg1 + ", " + reg2);
      }
      return (R)op;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = ".";
      if(n.f0.which == 0)reg = "sle";
      else if(n.f0.which == 1)reg = "sne";
      else if(n.f0.which == 2)reg = "add";
      else if(n.f0.which == 3)reg = "sub";
      else if(n.f0.which == 4)reg = "mul";
      else if(n.f0.which == 5)reg = "div";
      return (R)reg;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      String i = n.f1.accept(this).toString();
      return (R)i;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      from_simple_exp = true;
      String reg = n.f0.accept(this).toString();
      from_simple_exp = false;
      return (R)reg;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      exp_type = "reg";
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.accept(this).toString();
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      exp_type = "int";
      R _ret=null;
      n.f0.accept(this);
      String i = n.f0.toString();
      return (R)i;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      exp_type = "label";
      R _ret=null;
      n.f0.accept(this);
      String lab = n.f0.toString();
      if(from_stmt_list == true && from_stmt == false){
         System.out.print(lab + ":");
      }
      return (R)lab;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

}
