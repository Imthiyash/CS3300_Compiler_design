//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   Hashtable <String, String> Declaredtype = new Hashtable<String, String>();
   Hashtable <String, String> Method_type = new Hashtable<String, String>();
   Hashtable <String, Integer> Method_num_args = new Hashtable<String, Integer>();
   Hashtable <String, String> Method_args = new Hashtable<String, String>();
   Hashtable <String, Integer> Class_names = new Hashtable<String, Integer>();
   Hashtable <String, String> extender_class = new Hashtable<String, String>();
   String class_name = "_";
   String method_name = "_";
   boolean type_check = false;
   String type_name = "";
   boolean type_expr = false;
   String extend_class_name = "_";
   String arguments = "";
   String cur_arguments = "";
   int args = 0;
   int cur_args = 0;
   String main_class = "";

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;

      type_check = false;
      Class_names.put("int",1);
      Class_names.put("boolean",1);
      Class_names.put("IntArray",1);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);

      type_check = true;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);

      System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      type_expr = true;
      main_class = (n.f1.f0).toString();
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      type_expr = true;
      class_name = (n.f1.f0).toString();
      if(!type_check){
         if(class_name.equals(main_class)){
            System.out.println("Type error");
            System.exit(0);
         }
         if( Class_names.containsKey(class_name) == true ){
            System.out.println("Type error");
            System.exit(0);
         }
         Class_names.put(class_name,1);
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      class_name = "";
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      type_expr = true;
      n.f0.accept(this);
      class_name = (n.f1.f0).toString();
      extend_class_name = (n.f3.f0).toString();
      if(!type_check){
         if(class_name.equals(main_class)){
            System.out.println("Type error");
            System.exit(0);
         }
         if( Class_names.containsKey(class_name) == true ){
            System.out.println("Type error");
            System.exit(0);
         }
         Class_names.put(class_name,1);
         if(!class_name.equals(extend_class_name)){
            extender_class.put(class_name,extend_class_name);
         }
         else{
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if(type_check){
         String t = (n.f3.f0).toString();
         if( Class_names.containsKey(t) == false ){
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      class_name = "";
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      type_expr = true;
      n.f0.accept(this);
      if(!type_check){
         String id_name = (n.f1.f0).toString();
         String s = class_name + "." + method_name + "." + id_name;
         if(Declaredtype.containsKey(s) == true ){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            Declaredtype.put(s,type_name);
         }
         id_name = "";
      }
      if(type_check){
         if(n.f0.f0.which == 3 && Class_names.containsKey(type_name) == false){
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      type_expr = false;
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      method_name = (n.f2.f0).toString();
      args = 0;
      arguments = "";
      n.f0.accept(this);
      type_expr = true;
      n.f1.accept(this);
      String temp = type_name;
      type_expr = false;
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      if(!type_check){
         String s = class_name + "." + method_name;
         if( Method_type.containsKey(s) == true ){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            Method_type.put(s, temp);
            Method_num_args.put(s, args);
            Method_args.put(s, arguments);
         }
         String t = class_name;
         while(true){
            if( extender_class.containsKey(t) == true ){
               t = extender_class.get(t);
               s = t + "." + method_name;
               if(Method_type.containsKey(s) == true && !arguments.equals(Method_args.get(s))){
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
            else{
               break;
            }
         }
      }
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      if(type_check){
         if( temp != type_name ){
            if(Class_names.containsKey(type_name) == true){
               System.out.println("Type error");
               System.exit(0);
            }
            else{
               System.out.println("Symbol not found");
               System.exit(0);
            }
         }
      }
      n.f11.accept(this);
      n.f12.accept(this);
      method_name = "_";
      // System.out.println(Declaredtype);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> (FormalParameterRest())*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      args = args + 1;
      R _ret=null;
      type_expr = true;
      n.f0.accept(this);
      if(arguments == ""){
         arguments = type_name;
      }
      else{
         arguments = arguments + " " + type_name;
      }
      if(!type_check){
         String id_name = (n.f1.f0).toString();
         String s = class_name + "." + method_name + "." + id_name;
         if( Declaredtype.containsKey(s) == true ){
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            Declaredtype.put(s, type_name);
         }
         id_name = "";
      }
      type_expr = false;
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      type_name = "IntArray";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      type_name = "boolean";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      type_name = "int";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret = null;
      String type1 = ".",type2 = ".";
      if(type_check){
         String id_name = (n.f0.f0).toString();
         String temp = class_name;
         while(true){
            String s1 = temp + "._." + id_name;
            String s2 = temp + "." + method_name + "." + id_name;
            if( Declaredtype.containsKey(s2) == true ){
               type1 = Declaredtype.get(s2);
               break;
            }
            else if( Declaredtype.containsKey(s1) == true ){
               type1 = Declaredtype.get(s1);
               break;
            }
            if(extender_class.containsKey(temp)){
               temp = extender_class.get(temp);
            }
            else{
               break;
            }
         }
         if(type1.equals(".")){
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      n.f3.accept(this);
      if(type_check){
         if(type1.equals(".") || type2.equals(".")){
            System.out.println("Type error");
            System.exit(0);
         }
         else if(!type1.equals(type2)){
            while(true){
               if(type1.equals(type2)){
                  break;
               }
               if(extender_class.containsKey(type2) == false){
                  System.out.println("Type error");
                  System.exit(0);
               }
               else{
                  if(extender_class.get(type2) == type1){
                     break;
                  }
                  else{
                     type2 = type1;
                  }
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      String type1 = ".",type2 = ".",type3 = ".";
      R _ret=null;
      if(type_check){
         String id_name = (n.f0.f0).toString();
         String temp = class_name;
         while(true){
            String s1 = temp + "._." + id_name;
            String s2 = temp + "." + method_name + "." + id_name;
            if( Declaredtype.containsKey(s2) == true ){
               type1 = Declaredtype.get(s2);
               break;
            }
            else if( Declaredtype.containsKey(s1) == true ){
               type1 = Declaredtype.get(s1);
               break;
            }
            if(extender_class.containsKey(temp)){
               temp = extender_class.get(temp);
            }
            else{
               break;
            }
         }
         if(type1.equals(".")){
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      type3 = type_name;
      n.f6.accept(this);
      if(type_check){
         if(!type1.equals("IntArray") || !type2.equals("int") || !type3.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n) {
      R _ret=null;
      String type1 = ".";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      type1 = type_name;
      if(type_check){
         if(!type1.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n) {
      R _ret=null;
      String type1 = ".";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      type1 = type_name;
      if(type_check){
         if(!type1.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      String type1 = ".";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      type1 = type_name;
      if(type_check){
         if(!type1.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String type1 = ".";
      type1 = type_name;
      if(type_check){
         if(!type1.equals("boolean")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("boolean") || !type2.equals("boolean") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("boolean") || !type2.equals("boolean") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("int") || !type2.equals("int") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("int") || !type2.equals("int") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("int") || !type2.equals("int") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("int") || !type2.equals("int") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("int") || !type2.equals("int") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      if(type_check){
         if( !type1.equals("int") || !type2.equals("int") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      type2 = type_name;
      n.f3.accept(this);
      if(type_check){
         if( !type1.equals("IntArray") || !type2.equals("int") ){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      String type1 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      n.f2.accept(this);
      if(type_check){
         if(!type1.equals("IntArray")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      type_name = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      String type1 = ".",type2 = ".";
      n.f0.accept(this);
      type1 = type_name;
      n.f1.accept(this);
      type_expr = true;
      n.f2.accept(this);
      type_expr = false;
      type2 = (n.f2.f0).toString();
      n.f3.accept(this);
      String t = type1+"."+type2;
      if(type_check){
         if(Method_type.containsKey(t) == true && Method_num_args.get(t) == 0){
            cur_args = 0;
            cur_arguments = "";
         }
      }
      n.f4.accept(this);
      n.f5.accept(this);
      if(type_check){
         while(true){
            if(Method_type.containsKey(t) == true){
               if(Method_num_args.get(t) != cur_args){
                  System.out.println("Type error");
                  System.exit(0);
               }
               String str1[] = Method_args.get(t).split(" ");
               String str2[] = cur_arguments.split(" ");
               for(int i = 0;i < str1.length; i++){
                  String s1 = str1[i];
                  String s2 = str2[i];
                  if(!s1.equals(s2)){
                     if(extender_class.containsKey(s2) == false || extender_class.get(s2)!=s1){
                        System.out.println("Type error");
                        System.exit(0);
                     }
                  }
               }
               type_name = Method_type.get(t);
               break;
            }
            else{
               if(extender_class.containsKey(type1) == true){
                  String temp = extender_class.get(type1);
                  t = temp + "." + type2;
                  type1 = temp;
               }
               else{
                  System.out.println("Symbol not found");
                  System.exit(0);
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.f0.accept(this);
      cur_args = 1;
      cur_arguments = type_name;
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      cur_args = cur_args + 1;
      cur_arguments = cur_arguments + " " + type_name;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      type_name = "int";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      type_name = "boolean";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      type_name = "boolean";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      if(type_expr == false){
         String id_name = (n.f0).toString();
         String temp = class_name;
         String type1 = ".";
         while(true){
            String s1 = temp + "._." + id_name;
            String s2 = temp + "." + method_name + "." + id_name;
            String s3 = temp + "." + id_name;
            if( Declaredtype.containsKey(s2) == true ){
               type1 = Declaredtype.get(s2);
               break;
            }
            else if( Declaredtype.containsKey(s1) == true ){
               type1 = Declaredtype.get(s1);
               break;
            }
            else if( Method_type.containsKey(s3) == true ){
               type1 = Method_type.get(s3);
               break;
            }
            if( extender_class.containsKey(temp) == true ){
               temp = extender_class.get(temp);
            }
            else{
               break;
            }
         }
         if(Class_names.containsKey(id_name) == true){
            type1 = id_name;
         }
         if(type1 != "."){
            type_name = type1;
         }
         else{
            if(type_check){
               System.out.println("Symbol not found");
               System.exit(0);
            }
         }
      }
      else{
         type_name = (n.f0).toString();
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      type_name = class_name;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      type_name = "IntArray";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      type_name = (n.f1.f0).toString();
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      type_name = "boolean";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

}