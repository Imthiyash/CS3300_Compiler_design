//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   HashMap<String, Vector<String>> map_fields = new HashMap<String, Vector<String>>();
   HashMap<String, Vector<String>> map_methods = new HashMap<String, Vector<String>>();
   HashMap<String, String> classextnds = new HashMap<String, String>();
   HashMap<String, HashMap<String, String>> map_argmts = new HashMap<String, HashMap<String, String>>();
   HashMap<String, String> map_currargmts = new HashMap<String, String>();
   HashMap<String, String> map_types = new HashMap<String, String>();
   Vector<String> arg = new Vector<String>();
   String curr_class = "";
   String curr_method = "";
   String curr_type = "";
   boolean method_one = false;
   int tempnum = 0;
   int labelnum = 0;
   int parse = 0;
   
  public String tempreturn(){
         String x = "TEMP" + " " + String.valueOf(tempnum);
         tempnum++;
         return x;

  }

  public String labelreturn(){
        
        String x = "L" + String.valueOf(labelnum);
        labelnum++;
         return x;
  }
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      parse = 1;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      parse = 2;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      //  System.out.println("fields              ");
      // System.out.println(map_fields);
      //  System.out.println("methods              ");
      //   System.out.println(map_methods);
      //    System.out.println("arguments          ");
          System.out.println(map_argmts);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      if(parse == 2){
         System.out.println("MAIN");
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      if(parse == 2){
         System.out.println("END");
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      method_one = false;
      String temp_classname = n.f1.f0.tokenImage;
      curr_class = temp_classname;
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      method_one = false;
      String temp_classname = n.f1.f0.tokenImage;
      curr_class = temp_classname;
      n.f2.accept(this);
      n.f3.accept(this);
      String parentclass = n.f3.f0.tokenImage;
      if(parse == 1){
          classextnds.put(temp_classname, parentclass);
      }
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      String typp =  n.f0.accept(this).toString();
      n.f1.accept(this);
      String idt = n.f1.f0.tokenImage;
      if(parse == 1){
          map_types.put(curr_class + "." + curr_method +"." + idt, typp);
      }
      n.f2.accept(this);
      if(parse == 1){
         if(method_one == false){
            if(map_fields.containsKey(curr_class) == false){
               Vector<String> tvec = new Vector<String> ();
               tvec.add(idt);
               map_fields.put(curr_class,tvec);
            }
            else{
               map_fields.get(curr_class).add(idt);
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      map_currargmts.clear();
      tempnum = 0;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      method_one = true;
      String temp_methodname = n.f2.f0.tokenImage;
      curr_method = n.f2.f0.tokenImage;
      int num_argmts;
      if(parse == 2){
         String pt = curr_class + "_" + curr_method;
         String cc = curr_class + "." + curr_method;
         HashMap<String, String> hm = new HashMap<String, String>(map_argmts.get(cc));
         num_argmts = hm.size();
         System.out.println(pt + " [" + num_argmts + "]");
         System.out.println("BEGIN");
      }
      String nm = "this";
      String fst = tempreturn();
      if(parse == 1){
         if(map_methods.containsKey(curr_class) == false){
            Vector<String> tvec = new Vector<String> ();
            tvec.add(temp_methodname);
            map_methods.put(curr_class,tvec);
         }
         else{
            map_methods.get(curr_class).add(temp_methodname);
         }
         if(classextnds.containsKey(curr_class) == true){
            String ptclass = classextnds.get(curr_class);
            Vector<String> pvec = new Vector<String> ();
            pvec = map_methods.get(ptclass);
            for(int i = 0; i < pvec.size(); i++){
               map_methods.get(curr_class).add(pvec.elementAt(i));
            }

         }
         map_currargmts.put(nm, fst);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      if(parse == 1){
         String classmethd = curr_class + "." + curr_method;
         HashMap<String, String> hm = new HashMap<String, String>(map_currargmts);
         map_argmts.put(classmethd, hm);
      }
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      String rett = n.f10.accept(this).toString();
      n.f11.accept(this);
      n.f12.accept(this);
      if(parse == 2){
         System.out.println("RETURN " + rett);
         System.out.println("END");
      }
      curr_method = ".";
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      String typp =  n.f0.accept(this).toString();
      n.f1.accept(this);
      String idt = n.f1.f0.tokenImage;
      if(parse == 1){
          map_types.put(curr_class + "." + curr_method +"." + idt, typp);
      }
      String x = tempreturn();
      if(parse == 1){
            String argmtname = n.f1.f0.tokenImage;
            map_currargmts.put(argmtname,x);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      String typ = n.f0.accept(this).toString();
      return (R)typ;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      String var1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String var2 = n.f2.accept(this).toString();
      n.f3.accept(this);
      if(parse == 2){
      System.out.println("MOVE " + var1 + " " + var2);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String var = n.f2.accept(this).toString();
      String lab = labelreturn();
      n.f3.accept(this);
      if(parse == 2){
             System.out.println("CJUMP " + var + " " + lab);
      }
      n.f4.accept(this);
      String lab1 = labelreturn();
      if(parse == 2){
            System.out.println("JUMP " + lab1);
            System.out.println(lab);
            System.out.println("NOOP");
            System.out.println(lab1);
            System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String var = n.f2.accept(this).toString();
      String lab = labelreturn();
      n.f3.accept(this);
      if(parse == 2){
            System.out.println("CJUMP " + var + " " + lab);
      }
      n.f4.accept(this);
      String lab1 = labelreturn();
      if(parse == 2){
            System.out.println("JUMP " +lab1);
      }
      n.f5.accept(this);
      if(parse == 2){
             System.out.println(lab);
      }
      n.f6.accept(this);
      if(parse == 2){
         System.out.println(lab1 );
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      String lab = labelreturn();
      if(parse == 2){
          System.out.println(lab);
      }
      n.f0.accept(this);
      String lab1 = labelreturn();
      n.f1.accept(this);
      String var = n.f2.accept(this).toString();
      n.f3.accept(this);
      if(parse == 2){
         System.out.println("CJUMP " + var + " " + lab1);
      }
      n.f4.accept(this);
      if(parse == 2){
         System.out.println("JUMP " + lab);
         System.out.println(lab1);
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n) {
      R _ret=null;
      n.f0.accept(this);
      String lab1 = labelreturn();
      if(parse == 2){
         System.out.println(lab1);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String lab = labelreturn();
      String var = n.f4.accept(this).toString();
      n.f5.accept(this);
      if(parse == 2){
         System.out.println("CJUMP " + var + " " + lab);
         System.out.println("JUMP " + lab1);
      }
      n.f6.accept(this);
      if(parse == 2){
         System.out.println(lab);
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String var = (String)n.f2.accept(this);
      n.f3.accept(this);
      String temp = tempreturn();
      if(parse == 2){
         System.out.println("MOVE " + temp + " " + var);
         System.out.println("PRINT " + temp);
      }
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      String exp = (String)n.f0.accept(this);
      return (R)exp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      String var1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String lab = labelreturn();
      String var = tempreturn();
      String lab1 = labelreturn();
      if(parse == 2){
           System.out.println("CJUMP " + var1 + " " + lab);
           System.out.println("JUMP "  + lab1);
           System.out.println(lab1);
      }
      String var2 = n.f2.accept(this).toString();
      if(parse == 2){
            System.out.println("CJUMP " + var2 + " " + lab);
            String lab2 = labelreturn();
            System.out.println("JUMP "  + lab2);
            System.out.println(lab2);
            System.out.println("MOVE " + var + " " + "1");
            String lab3 = labelreturn();
            System.out.println("JUMP " + lab3);
            System.out.println(lab);
            System.out.println("MOVE " + var + " " + "0");
            System.out.println(lab3);
            System.out.println("NOOP");
      }
      return (R)var;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n) {
      R _ret=null;
     String var1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String lab = labelreturn();
      String var = tempreturn();
      String lab1 = labelreturn();
      if(parse == 2){
           System.out.println("CJUMP " + var1 + " " + lab);
           System.out.println("JUMP "  + lab1);
           System.out.println(lab);

      }
      String var2 = n.f2.accept(this).toString();
      if(parse == 2){
            String lab4 = labelreturn();
            System.out.println("CJUMP " + var2 + " " + lab4);
            String lab2 = labelreturn();
            System.out.println("JUMP "  + lab1);
            System.out.println(lab1);
            System.out.println("MOVE " + var + " " + "1");
            String lab3 = labelreturn();
            System.out.println("JUMP "  + lab3);
            System.out.println(lab4);
            System.out.println("MOVE " + var + " " + "0");
            System.out.println("JUMP "  + lab3);
            System.out.println(lab3);
            System.out.println("NOOP");
      }
      return (R)var;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      String exp1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String exp2 = n.f2.accept(this).toString();
      String var3 = tempreturn();
      if(parse == 2){
         System.out.println("MOVE " + var3 + " LE " + exp1 + " " + exp2);
         
      }
      return (R)var3;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n) {
      R _ret=null;
      String exp1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String exp2 = n.f2.accept(this).toString();
      String var3 = tempreturn();
      if(parse == 2){
         System.out.println("MOVE " + var3 + " NE " + exp1 + " " + exp2);
         
      }

    return (R)var3;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n) {
      R _ret=null;
      String exp1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String exp2 = n.f2.accept(this).toString();
      String var3 = tempreturn();
      if(parse == 2){
         System.out.println("MOVE " + var3 + " PLUS " + exp1 + " " + exp2);
         
      }
      return (R)var3;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      String exp1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String exp2 = n.f2.accept(this).toString();
      String var3 = tempreturn();
      if(parse == 2){
         System.out.println("MOVE " + var3 + " MINUS " + exp1 + " " + exp2);
         
      }
      return (R)var3;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
     R _ret=null;
      String exp1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String exp2 = n.f2.accept(this).toString();
      String var3 = tempreturn();
      if(parse == 2){
         System.out.println("MOVE " + var3 + " TIMES " + exp1 + " " + exp2);
         
      }
      return (R)var3;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n) {
     R _ret=null;
      String exp1 = n.f0.accept(this).toString();
      n.f1.accept(this);
      String exp2 = n.f2.accept(this).toString();
      String var3 = tempreturn();
      if(parse == 2){
         System.out.println("MOVE " + var3 + " DIV " + exp1 + " " + exp2);
         
      }
      return (R)var3;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String var = tempreturn();
      return (R)var;
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String var = tempreturn();
      return (R)var;
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      String var = n.f0.accept(this).toString();
      String temp_class = curr_type;
      n.f1.accept(this);
      n.f3.accept(this);
      String vars = tempreturn();
      String temp2 = tempreturn();
      String temp1 = tempreturn();
      n.f2.accept(this);
      String method_name = n.f2.f0.toString();
      if(parse == 2){
         int id = map_methods.get(temp_class).indexOf(method_name);
         String temp = tempreturn();
         System.out.println("HLOAD " + temp + " " + var + " " + 0);
         System.out.println("HLOAD " + temp1 + " " + temp + " " + id*4);
         arg.clear();
      }
      n.f4.accept(this);
      n.f5.accept(this);
      if(parse == 2){
         System.out.print("MOVE " + temp2 + " CALL " + temp1 + " (");
         System.out.print(" TEMP 0 ");
         for(int i=0;i<arg.size();i++){
            System.out.print(arg.get(i));
         }
         System.out.println(")");
         vars = temp2;
      }
      return (R)vars;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      String var = n.f0.accept(this).toString();
      n.f1.accept(this);
      if(parse == 2){
      arg.add(" " + var + " ");
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      String var = n.f1.accept(this).toString();
      if(parse == 2){
      arg.add(" " + var + " ");
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      String pexp = (String)n.f0.accept(this);
      return (R)pexp;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
       String tempvar = tempreturn();
      if(parse == 2){
        
         String var = n.f0.toString();
         System.out.println("MOVE "+ tempvar + " " + var);
        
      }
       return (R)tempvar;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String tempvar = tempreturn();
      if(parse == 2){
         
         System.out.println("MOVE "+ tempvar + " " + 1);
         
      }
      return (R)tempvar;
     
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String tempvar = tempreturn();
      if(parse == 2){
         System.out.println("MOVE "+ tempvar + " " + 0);
         
      }
      return (R)tempvar;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);  
      String var = n.f0.toString();
      if(parse == 2){
      if(map_types.containsKey(curr_class+"."+curr_method+"."+var) == true){
         curr_type = map_types.get(curr_class+"."+curr_method+"."+var);
      }
      else{
         curr_type = ".";
      }   
         String cc = curr_class + "." + curr_method;
         if(map_argmts.containsKey(cc)){
               HashMap<String, String> hm = new HashMap<String, String>(map_argmts.get(cc));
               if(hm.containsKey(var) == true){
                  var = hm.get(var);
               }
               else{
                  Vector<String> v = new Vector<String>();
                  if(map_fields.containsKey(curr_class)){
                     v = new Vector<String>(map_fields.get(curr_class));
                  }
                  if(v.contains(var) == true){
                        int id = v.indexOf(var);
                        String temp = tempreturn();
                        int offs = (id*4)+ 4;
                        System.out.println("HLOAD " + temp + " TEMP 0 " + offs);
                        return (R)temp;
                  }
                  else{
                        String temp2 = tempreturn();
                        hm.put(var, temp2);
                        map_argmts.put(cc, hm);
                        return (R)temp2;
                  }
               }
         }
         else{
            return (R)var;
         }
      }
      return (R)var;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      curr_type = curr_class;
      return (R)"TEMP 0";
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String var = tempreturn();
      return (R)var;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String var = n.f1.f0.tokenImage;
      if(parse == 2){
         int num_methods = (map_methods.get(var).size()) * 4;
         String temp = tempreturn();
         System.out.println("MOVE " + temp + " " + num_methods);
          String temp1 = tempreturn();
         System.out.println("MOVE " + temp1 + " HALLOCATE " + temp);
         String temp2 = tempreturn();
         System.out.println("MOVE " + temp2 + " " + temp1);

         int num_fields = 4;
         if(map_fields.containsKey(var)){
            num_fields = ((map_fields.get(var).size()) * 4) + 4;
         }
         String temp3 = tempreturn();
         System.out.println("MOVE " + temp3 + " " + num_fields);
         String temp4 = tempreturn();
         System.out.println("MOVE " + temp4 + " HALLOCATE " + temp3);
         String temp5 = tempreturn();
         System.out.println("MOVE " + temp5 + " " + temp4);
         String temp6 = tempreturn();
         for(int i = 0;i < num_methods/4; i++){
               System.out.println("MOVE " + temp6 + " " + var + "_"+ (map_methods.get(var).get(i)));
               System.out.println("HSTORE " + temp2 + " " + i*4 + " " + temp6);
         }
         System.out.println("HSTORE " + temp5 + " 0 " + temp2);
          String temp9 = tempreturn();
         System.out.println("MOVE " + temp9 + " " + 4);
         String L0 = labelreturn();
         System.out.println(L0);
         String temp7 = tempreturn();
         System.out.println("MOVE " + temp7 + " " + (num_fields-1));
         String temp8 = tempreturn();
         System.out.println("MOVE " + temp8 + " LE " + temp9 + " " +  temp7);
          String L1 = labelreturn();
         System.out.println("CJUMP " + temp8 + " " +  L1);
         String temp10 = tempreturn();
         System.out.println("MOVE " + temp10 + " PLUS " + temp5 +" " + temp9);
         String temp11 = tempreturn();
         System.out.println("MOVE " + temp11 + " " +  0);
         System.out.println("HSTORE " + temp10 + " " +  0 +" "+ temp11 );
         String temp12 = tempreturn();
         System.out.println("MOVE " + temp12 + " " + 4);
         String temp13 = tempreturn();
         System.out.println("MOVE " + temp13 +  " PLUS " + temp9 + " " +  temp12 );
         System.out.println("MOVE " + temp9 + " " +  temp13 );
         System.out.println("JUMP " + L0);
         System.out.println(L1);
         curr_type = var;
         return (R)temp5;
      }
      return (R)var;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
     String var =  n.f1.accept(this).toString();
      String var1 = tempreturn();
      System.out.println("MOVE " + var1 + " MINUS " + 1 +" " + var);
      return (R)var1;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
       String var = n.f1.accept(this).toString();
      n.f2.accept(this);
      return (R)var;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

}
